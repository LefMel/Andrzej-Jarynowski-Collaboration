# AUC
AUC <- phi(-(lambda[1]-lambda[2])/sqrt(sigma[2]+sigma[1]))
# ROC curve
for(i in 1:111) {
c1[i] <-  ((-8.1+0.1*i)-lambda[2])/sqrt(sigma[2]) # grid is from -3 to 8
se[i] <- 1-phi(c1[i])
c2[i] <-  ((-8.1+0.1*i)-lambda[1])/sqrt(sigma[1])
sp[i] <- phi(c2[i])
Y[i] <- se[i] + sp[i] - 1
}
#data# alpha, S
#inits# lambda, gamma
#monitor# AUC, se, sp, P, lambda, gamma, sigma
}
")
alpha <- c(1,1)
S <- c(-1.09,-0.69,-1.26,-0.54,-2.09,-0.76,0.13,-1.86,-0.21,-1.48,-0.02,-0.17,-1.19,-1.51,-0.92,0.21,-1.01,-1.97,-1.02,-0.06,-1.26,-2.34,-0.29,-2.44,-1.03,-1.97,-0.22,-1.45,
-2.53,-2.03,-1.90,-2.27,0.81,0.17,-1.45,-0.56,-0.32,-0.02,-2.03,-2.21,-1.29,-1.31, 0.22,0.17,0.37,-3.06,-0.33,-0.97,0.84,-0.03,-2.66,0.01,-1.39,0.81,-0.45,-0.87,
0.21,0.46,-0.53,-0.29,0.51,-0.56,-0.67,-0.54,-0.51,-0.99,-0.21,-2.04,-1.97,-0.16,
0.43,-1.77,0.19,-1.08,-2.30,-1.66,-0.78,-0.69,-2.41,-2.41,-1.51,-2.53,-0.33,0.20,
-0.24,-2.53,-0.80,-2.12,-2.98,-2.90,-2.66,-2.75,-2.83,-2.83,-2.92,-2.98,-2.88,-2.55,-2.78,-2.80,-2.94,-2.98,-3.02,-2.83,-2.86,-2.98,-2.88,-2.63,-2.94,-2.48,-2.86,-2.88,-2.78,-2.98,-2.80,-2.94,-2.60,-2.63,-2.92,-2.81,-2.62,-2.86,-2.83,-2.81,-2.78,-2.76,-2.63,-1.98,-2.81,-2.28, -2.69,-2.60,-2.31,-2.63,-2.70,-2.88,-2.55,-2.60,-2.45,-2.73,-2.78,-1.81,-2.69,-2.51,-2.72,-2.67,-1.53,-2.78,-2.65,-2.17,-2.36,-2.75,-2.49,-2.50,-2.59,-2.69,-2.20,-2.40,-2.23,-2.12,-2.65,-2.44,-2.67,-2.55,-2.56,-2.23,-2.70,-2.24,-2.44,-1.93,-2.28,-2.72,-2.25,-2.44,-2.66,-2.65,-2.70,-2.55,-2.30,-2.67,-2.73,-2.40,-3.06,-2.92,-3.06,-3.06, -3.02,-2.86,-2.94,-3.00,-2.88,-2.88,-3.08,-2.92,-3.06,-2.90,-2.92,-3.04,-3.10,-2.96, -3.02,-3.08,-2.88,-2.92,-2.96,-3.08,-2.94,-3.00,-3.04,-2.67,-2.98,-3.02,-3.00,-3.04,
-2.44,-3.08,-3.02,-2.98,-2.94,-2.90,-2.47,-3.06,-3.06,-3.04,-1.87,-2.14,-2.45,-2.62,
-2.63,-2.19,-2.54,-2.67,-2.54,-2.27,-2.73,-2.50,-2.60,-2.62,-2.62,-2.40,-2.59,-2.35,
-2.44,-2.48,-2.58,-2.55,-2.75,-2.73,-2.80,-2.49,-2.51,-2.66,-2.60,-2.60,-2.67,-2.43,
-2.73,-2.59,-2.67,-2.49,-2.54,-2.23,-2.49,-2.11,-2.59,-2.41,-2.51,-2.75,-2.81,-2.38,
-2.47,-2.45,-2.75,-2.96,-2.83,-2.98,-2.90,-2.90,-2.92,-2.98,-2.92,-2.60,-2.98,-2.96,
-2.92,-2.94,-2.81,-3.00,-2.54,-2.67,-2.96,-2.83,-2.90,-2.02,-2.70,-2.81,-1.97,-2.69,
-2.30,-2.80,-2.90,-2.67,-2.86,-2.88,-2.75,-2.65,-2.80,-2.73,-2.76,-2.73,-2.78,-2.76,
-2.83,-2.53,-2.85,-2.78,-2.85,-3.08,-3.10,-3.08,-3.08,-3.02,-3.08,-2.80,-2.98,-3.04,
-3.02,-3.04,-3.08,-3.02,-2.86,-2.98,-3.00,-3.08,-3.08,-2.98,-3.06,-3.04,-3.06,-3.02,
-3.02,-3.08,-2.83,-3.08,-3.08,-2.90,-2.98,-3.06,-2.94,-2.98,-3.06,-2.85,-3.02,-3.00,
-3.06,-3.06,-3.08,-2.92,-3.10,-3.04,-3.08,-2.94,-3.10,-3.00,-2.98,-3.06,-2.98,-3.06,
-3.04,-3.08,-2.65,-2.85,-3.00,-3.04,-2.51,-2.85,-2.63,-2.90,-2.56,-2.67,-2.78,-2.65,
-2.67,-2.76,-2.78,-2.50,-2.32,-2.54,-2.56,-2.47,-2.73,-2.44,-2.76,-2.76,-2.54,-2.62,
-2.54,-2.83,-2.65,-2.55,-2.59,-2.75,-2.66,-2.86,-2.69,-2.75,-2.75,-2.72,-2.15,-2.63,
-2.80,-2.63,-2.48,-2.47,-2.34,-2.63,-2.50,-2.36,-2.75,-2.51,-2.30,-2.70,-2.69,-2.65,
-2.40,-2.81,-3.00,-2.83,-2.81,-2.90,-2.86,-2.81,-2.25,-2.88,-3.00,-2.90,-2.81,-2.88,
-2.80,-2.85,-2.98,-2.80,-2.83,-2.63,-2.58,-2.85,-2.76,-2.75,-2.85,-2.86,-2.81,-2.78,
-2.75,-2.69,-2.62,-2.81,-2.92,-2.88,-2.92,-2.85,-2.94,-2.86,-2.96,-2.67,-2.63,-2.83,
-2.81,-2.70,-2.69,-2.90,-2.80,-2.85,-2.67,-2.43,-2.85,-2.86,-2.98,-2.86,-2.94,-2.94,
-2.83)
summary(S)
lambda <- list(chain1=c(-3, 0), chain2=c(-2,-2))
gamma <- list(chain1=c(10, 0.1), chain2=c(30, 5))
results <- run.jags('cont_test.txt', n.chains = 2)
results <- run.jags(continuous_test, n.chains = 2)
results_summary <- add.summary(results, vars=c('AUC', 'P', 'lambda', 'gamma', 'sigma'))
se_est <- combine.mcmc(results, vars='se')
sp_est <- combine.mcmc(results, vars='sp')
ses_mu <- apply(se_est, 2, mean)
sps_mu <- apply(sp_est, 2, mean)
plot((1-sps_mu), ses_mu, type="l", col="darkblue", xlab = "1-Sp", ylab = "Se")
auc_est <- combine.mcmc(results, vars='AUC')
hist(auc_est, breaks=50, col="orange", main="AUC")
View(results)
summary(results)
library(dist.Dirichlet)
install.packages(gtools)
install.packages('gtools')
library(gtools)
curve*ddirichlet(x,1))
curve*ddirichlet(x,1))
curve(ddirichlet(x,1))
?ddirichlet
curve(ddirichlet(x,1))
curve(ddirichlet(x,c(1,1))
)
library("tidyverse")
library("runjags")
library("rjags")
runjags.options(silent.jags=TRUE, silent.runjags=TRUE)
set.seed(2022-07-14)
# Reduce the width of R code output for PDF only:
if(params$presentation){
knitr::knit_hooks$set(size = function(before, options, envir) {
if(before){
knitr::asis_output(paste0("\\", options$size))
}else{
knitr::asis_output("\\normalsize")
}
})
knitr::opts_chunk$set(size = "scriptsize")
}
# Collapse successive chunks:
space_collapse <- function(x){ gsub("```\n*```r*\n*", "", x) }
# Reduce space between chunks:
space_reduce <- function(x){ gsub("```\n+```\n", "", x) }
knitr::knit_hooks$set(document = space_collapse)
# To collect temporary filenames:
cleanup <- character(0)
summary(S)
111*0.1 + -8.1
111*0.1  -8.1
summary(results)
se_est <- combine.mcmc(results, vars='se')
sp_est <- combine.mcmc(results, vars='sp')
ses_mu <- apply(se_est, 2, mean)
sps_mu <- apply(sp_est, 2, mean)
par(mfrow=c(1,1))
plot((1-sps_mu), ses_mu, type="l", col="darkblue", xlab = "1-Sp", ylab = "Se")
auc_est <- combine.mcmc(results, vars='AUC')
hist(auc_est, breaks=50, col="orange", main="AUC")
library(DSI)
library(DSOpal)
library(dsBaseClient)
library(dsHelper)
library(DSI)
library(DSOpal)
library(dsBaseClient)
builder <- DSI::newDSLoginBuilder()
builder$append(server = "Hospital_Princesa",
url = "https://192.168.1.200:8001",
user = "user_analisis", password = "Ekfl07UUgz")
builder$append(server ="Hospital_HM",
url ="https://192.168.1.50:9002",
user = "user_analisis", password = "Ekfl07UUgz")
#builder$append(server = "sc_verona",
#               url = "https://192.168.1.50:8890",
#               user = "user_analisis", password = "**********")
#builder$append(server = "umf_cluj",
#               url = "https://192.168.1.200:8005",
#               user = "user_analisis", password = "**********")
#builder$append(server = "test_server", # This server will fail!
#               url = "https://192.168.1.1:8888",
#               user = "test", password = "**********")
logindata <- builder$build()
library(httr)
connections <- DSI::datashield.login(logins = logindata, failSafe = FALSE)
connections <- DSI::datashield.login(logins = logindata, assign=TRUE, failSafe = TRUE)
connections <- DSI::datashield.login(logins = logindata, assign = TRUE)
connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D", failSafe = TRUE)
set_config(config(ssl_verifypeer = 0L,
ssl_verifyhost = 0L))
connections <- DSI::datashield.login(logins = logindata, failSafe = FALSE)
o <- opalr::opal.login(username = "user_analisis",
password = "Ekfl07UUgz",
url = "https://192.168.1.200:8001")
opalr::opal.projects(o)
opalr::opal.resources(o, "FIBHULP")
DSI::datashield.assign.resource(connections$Hospital_Princesa, "resource", "FIBHULP.Harmonized_variables")
DSI::datashield.assign.expr(conns = connections, symbol = "data",
expr = "as.resource.data.frame(resource)")
datashield.errors()
colnames_servers <- ds.colnames("data")
ds.class("data")
colnames_servers <- ds.colnames("data")
ds.quantileMean("data$CSXCHRA"), type = "split")
ds.quantileMean("data$CSXCHRA", type = "split")
connections
o <- opalr::opal.login(username = "user_analisis",
password = "Ekfl07UUgz",
url = "https://192.168.1.50:9002")
opalr::opal.projects(o)
opalr::opal.resources(o, "FIBHULP")
opalr::opal.resources(o, "FiHM")
DSI::datashield.assign.resource(connections$Hospital_HM, "resource", "FiHM.harmonized_data")
DSI::datashield.assign.expr(conns = connections, symbol = "data",
expr = "as.resource.data.frame(resource)")
ds.class("data")
colnames_servers <- ds.colnames("data")
ds.quantileMean("data$CSXCHRA", type = "split")
ds.colnames("data")
ds.quantileMean("data$CSXCHRHn", type = "split")
ds.quantileMean("data$DMXWT", type = "split")
ds.quantileMean("data$SMXCOA", type = "split")
ds.quantileMean("data$SMXGCS", type = "split")
ds.quantileMean("data$SMXAVPU", type = "split")
ds.quantileMean("data$DATCOT", type="split")
ds.quantileMean("data$CSXCOT", type="split")
opalr::opal.resources(o, "FiHM")
opalr::opal.projects(o)
opalr::opal.resources(o, "FiHM")
opalr::opal.projects(o)
opalr::opal.resources(o, "FiHM")
DSI::datashield.assign.resource(connections$Hospital_HM, "resource", "FiHM.20220720_HarmonisedHM")
a <- opalr::opal.resources(o, "FiHM")
a$project
a$name[1]
DSI::datashield.assign.expr(conns = connections, symbol = "data",
expr = "as.resource.data.frame(resource)")
ds.class("data")
ds.colnames("data")
ds.quantileMean("data$CSXCHRA", type = "split")
ds.quantileMean("data$SMXCOA", type = "split")
b <- ds.colnames("data")
b$Hospital_Princesa[1]
b$Hospital_HM[2]
b$Hospital_Princesa[2]
which(b$Hospital_Princesa ==  b$Hospital_Princesa)
b$Hospital_Princesa[61]
b$Hospital_HM[61]
which(b$Hospital_Princesa ==  b$Hospital_HM)
which(b$Hospital_Princesa ==  b$Hospital_HM)
a <- opalr::opal.resources(o, "FiHM")
a
builder <- DSI::newDSLoginBuilder()
builder$append(server ="Nat.Registry_Porto",
url ="https://192.168.1.102",
user = "user_analisis", password = "Ekfl07UUgz")
#builder$append(server = "sc_verona",
#               url = "https://192.168.1.50:8890",
#               user = "user_analisis", password = "**********")
#builder$append(server = "umf_cluj",
#               url = "https://192.168.1.200:8005",
#               user = "user_analisis", password = "**********")
#builder$append(server = "test_server", # This server will fail!
#               url = "https://192.168.1.1:8888",
#               user = "test", password = "**********")
logindata <- builder$build()
connections <- DSI::datashield.login(logins = logindata, failSafe = FALSE)
set_config(config(ssl_verifypeer = 0L,
ssl_verifyhost = 0L))
connections <- DSI::datashield.login(logins = logindata, failSafe = TRUE)
connections <- DSI::datashield.login(logins = logindata, failSafe = TRUE)
connections <- DSI::datashield.login(logins = logindata, assign=TRUE, failSafe = TRUE)
connections <- DSI::datashield.login(logins = logindata, assign=TRUE, failSafe = TRUE)
connections <- DSI::datashield.login(logins = logindata, assign = TRUE)
connections <- DSI::datashield.login(logins = logindata, assign = TRUE)
connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D", failSafe = TRUE)
set_config(config(ssl_verifypeer = 0L,
ssl_verifyhost = 0L))
builder <- DSI::newDSLoginBuilder()
library(DSI)
library(DSOpal)
library(dsBaseClient)
builder <- DSI::newDSLoginBuilder()
builder$append(server ="Nat.Registry_Porto",
url ="https://192.168.1.102",
user = "user_analisis", password = "Ekfl07UUgz")
set_config(config(ssl_verifypeer = 0L,
ssl_verifyhost = 0L))
connections <- DSI::datashield.login(logins = logindata, assign=TRUE, failSafe = TRUE)
builder$append(server ="Hospital_Baskent_Ankara_inpatient",
url ="https://192.168.1.101:8443",
user = "user_analisis", password = "Ekfl07UUgz")
#builder$append(server = "sc_verona",
#               url = "https://192.168.1.50:8890",
#               user = "user_analisis", password = "**********")
#builder$append(server = "umf_cluj",
#               url = "https://192.168.1.200:8005",
#               user = "user_analisis", password = "**********")
#builder$append(server = "test_server", # This server will fail!
#               url = "https://192.168.1.1:8888",
#               user = "test", password = "**********")
logindata <- builder$build()
library(httr)
logindata
connections <- DSI::datashield.login(logins = logindata, failSafe = TRUE)
#builder$append(server = "sc_verona",
#               url = "https://192.168.1.50:8890",
#               user = "user_analisis", password = "**********")
#builder$append(server = "umf_cluj",
#               url = "https://192.168.1.200:8005",
#               user = "user_analisis", password = "**********")
#builder$append(server = "test_server", # This server will fail!
#               url = "https://192.168.1.1:8888",
#               user = "test", password = "**********")
logindata <- builder$build()
logindata
builder <- DSI::newDSLoginBuilder()
builder$append(server ="Hospital_Baskent_Ankara_inpatient",
url ="https://192.168.1.101:8443",
user = "user_analisis", password = "Ekfl07UUgz")
#builder$append(server = "sc_verona",
#               url = "https://192.168.1.50:8890",
#               user = "user_analisis", password = "**********")
#builder$append(server = "umf_cluj",
#               url = "https://192.168.1.200:8005",
#               user = "user_analisis", password = "**********")
#builder$append(server = "test_server", # This server will fail!
#               url = "https://192.168.1.1:8888",
#               user = "test", password = "**********")
logindata <- builder$build()
logindata
connections <- DSI::datashield.login(logins = logindata, failSafe = TRUE)
#set_config(use_proxy(url="10.3.100.207",port=8080))
connections <- DSI::datashield.login(logins = logindata, failSafe = FALSE)
#set_config(use_proxy(url="10.3.100.207",port=8080))
connections <- DSI::datashield.login(logins = logindata, failSafe = FALSE)
connections <- DSI::datashield.login(logins = logindata, assign=TRUE, failSafe = TRUE)
connections <- DSI::datashield.login(logins = logindata, assign = TRUE)
set_config(config(ssl_verifypeer = 0L,
ssl_verifyhost = 0L))
connections <- DSI::datashield.login(logins = logindata, failSafe = FALSE)
set_config(config(ssl_verifyhost = 0L))
#set_config(use_proxy(url="10.3.100.207",port=8080))
connections <- DSI::datashield.login(logins = logindata, failSafe = FALSE)
connections <- DSI::datashield.login(logins = logindata, assign = TRUE)
builder <- DSI::newDSLoginBuilder()
builder <- DSI::newDSLoginBuilder()
builder$append(server ="Nat.Registry_Porto",
url ="https://192.168.1.102",
user = "user_analisis", password = "Ekfl07UUgz")
#builder$append(server = "sc_verona",
#               url = "https://192.168.1.50:8890",
#               user = "user_analisis", password = "**********")
#builder$append(server = "umf_cluj",
#               url = "https://192.168.1.200:8005",
#               user = "user_analisis", password = "**********")
#builder$append(server = "test_server", # This server will fail!
#               url = "https://192.168.1.1:8888",
#               user = "test", password = "**********")
logindata <- builder$build()
logindata
set_config(config(ssl_verifyhost = 0L))
connections <- DSI::datashield.login(logins = logindata, failSafe = FALSE)
connections <- DSI::datashield.login(logins = logindata, assign=TRUE, failSafe = FALSE)
connections <- DSI::datashield.login(logins = logindata, assign=TRUE, failSafe = TRUE)
qunif(0.75)
(0.75*0.3)/(0.75*0.3 + (1-0.52)*(1-0.3))
?apply
nosim  =1000
n = 10
sd(apply(matrix(rnorm(nosim*n), nosim), 1, mean) )
matrix(rnorm(nosim*n), nosim)
sd(apply(matrix(rnorm(nosim*n), nosim), 2, mean) )
(apply(matrix(rnorm(nosim*n), nosim), 2, mean) )
(apply(matrix(rnorm(nosim*n), nosim), 1, mean) )
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
?t.test
t.test(1100, 8)$conf
?qt
1100 + c(-1,1)*qt(0.975,8, lower.tail = FALSE)*30/sqrt(9)
qt(0.975,8, lower.tail = FALSE)
qt(0,8)
qt(0,8, lower.tail = FALSE)
qt(0.975,8)
qt(0.975,8, lower.tail = FALSE)
t.test(3,5)
(3 - 5) + c(-1,1)*qt(0.975,18, lower.tail = FALSE)*sqrt(1/10 + 1/10)
(3 - 5) + c(-1,1)*qt(0.975,18, lower.tail = FALSE)*sqrt(1/10 + 1/10)
(3 - 5) + c(-1,1)*qt(0.975,18, lower.tail = FALSE)*0.6*sqrt(1/10 + 1/10)
sp <- (9*0.68 + 9*0.6)/18
(3 - 5) + c(-1,1)*qt(0.975,18, lower.tail = FALSE)*sqrt(sp)**sqrt(1/10 + 1/10)
(3 - 5) + c(-1,1)*qt(0.975,18, lower.tail = FALSE)*sqrt(sp)*sqrt(1/10 + 1/10)
sp <- (9*(1.5^2) + 9*(1.8^2))/16
(-3 - 1) + c(-1,1)*qt(0.90,16, lower.tail = FALSE)*sqrt(sp)*sqrt(1/9 + 1/9)
sp <- (8*(1.5^2) + 8*(1.8^2))/16
(-3 - 1) + c(-1,1)*qt(0.90,16, lower.tail = FALSE)*sqrt(sp)*sqrt(1/9 + 1/9)
(-3 - 1) + c(-1,1)*qt(0.95,16, lower.tail = FALSE)*sqrt(sp)*sqrt(1/9 + 1/9)
sp <- (199*(0.5^2) + 199*(2^2))/198
(4 - 6) + c(-1,1)*qt(0.95,198, lower.tail = FALSE)*sqrt(sp)*sqrt(1/100 + 1/100)
sp <- (99*(0.5^2) + 99*(2^2))/198
(4 - 6) + c(-1,1)*qt(0.95,198, lower.tail = FALSE)*sqrt(sp)*sqrt(1/100 + 1/100)
(6 - 4) + c(-1,1)*qt(0.95,198, lower.tail = FALSE)*sqrt(sp)*sqrt(1/100 + 1/100)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
install_from_swirl("Statistical Inference")
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(0.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
sd(difference)
s <-0 sd(difference)
s <- sd(difference)
mn + c(-1,1)*qt(0.975,9, lower.tail = FALSE)*s/sqrt(10)
mn + c(-1,1)*qt(0.975,9, lower.tail = FALSE)*s/sqrt(10)
mn + c(-1,1)*qt(0.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- (9-1)*(15.34)^2 + (21-1)*(18.23)^2
sp <- (8-1)*(15.34)^2 + (21-1)*(18.23)^2
ns <- (8 -1)+(21-1)
sp <- sp/ns
sp <- sqrt(sp/ns)
132.86 - 127.44 + c(-1,1)*sp*sqrt(1/8 + 1/21)
132.86 - 127.44 + c(-1,1)*qt(0.975,ns)*sp*sqrt(1/8 + 1/21)
sp <- ((10-1)*var(g1) + (10-1)*var(g2))/(10+10-2)
sp <- sqrt(((10-1)*var(g1) + (10-1)*var(g2))/(10+10-2))
sp <- sqrt((9*var(g1) + 9*var(g2))/(18))
sp <- sqrt((9*var(g1) + 9*var(g2))/18)
md + c(-1,1)*qt(0.975,18)*sp*sqrt(1/10 + 1/10)
t.test(difference, paired=TRUE)$conf
t.test(difference, paired=FLASE, var.equal = TRUE)$conf
t.test(difference, paired=FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired=FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired=FALSE, var.equal = FALSE)$conf
t.test(g2, g1, paired=FALSE)$conf
t.test(g2, g1, paired=TRUE)$conf
citation()
citation()
install.packages("survival")
install.packages("coxme")
citation("survival")
citation("coxme")
library(referenceIntervals)
citate(referenceIntervals)
citation(referenceIntervals)
citation("referenceIntervals")
curve(dgamma(x,0.001,0.01))
curve(dgamma(x,0.001,0.001))
curve(dgamma(x,0.001,0.01))
curve(dgamma(x,0.001,0.001))
library(readxl)
RASFF_window_results_Biological_bacteria <- read_excel("Downloads/RASFF_window_results_Biological_bacteria.xlsx")
View(RASFF_window_results_Biological_bacteria)
data = RASFF_window_results_Biological_bacteria
names(data)
ggplot(data, aes(x=risk_decision)) +
geom_bar() +
labs(title = "Frequency of Categories", x = "Category", y = "Frequency") +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x=risk_decision)) +
geom_bar() +
labs(title = "Frequency of Categories", x = "Category", y = "Frequency") +
theme_minimal()
ggplot(data, aes(x=risk_decision)) +
geom_bar() +
labs(title = "Frequency of Categories", x = "Category", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x=hazards...6)) +
geom_bar() +
labs(title = "Frequency of Categories", x = "Category", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x=hazards...6)) +
geom_bar() +
labs(title = "Frequency of Categories", x = "Category", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data, aes(x=hazards...6)) +
geom_bar() +
labs(title = "Frequency of Categories", x = "Biological Hazard", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
names(data)
ggplot(data, aes(x=date)) +
geom_bar() +
labs(title = "Frequency of Categories", x = "Biological Hazard", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data, aes(x=notifying_country)) +
geom_bar() +
labs(title = "Frequency of Categories", x = "Biological Hazard", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
?grepl
?subst
?subsr
?substr
substr(data$date,start=-4)
substr(data$date,start=-4, stop=10)
substr(data$date,start=-4, stop=0)
substr(data$date,start=7, stop=10)
data$year = substr(data$date,start=7, stop=10)
ggplot(data, aes(x=year)) +
geom_bar() +
labs(title = "Frequency of Categories", x = "Biological Hazard", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data, aes(x=year)) +
geom_bar() +
labs(title = "Frequency of Biological Hazards", x = "Date", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
getwd()
setwd("/Users/lefmel/Documents/Publications//Andrzej Jarynowski Collaboration/Data")
getwd()
list.files()
library(openxlsx)
draft = read.xlsx("syndormalka.xlsx")
names(draft)
draft[,c("Week")]
data = draft[,c("Week", "wave_parts", "waves", "Incid+/Synd+","Incid+/Synd-", "Incid-/Synd+", "Incid-/Synd-")]
names(data)
library(runjags)
getwd()
setwd("C:/Users/LefMel/Documents/Xhelil Koleci Brucellosis")
setwd("C:/Users/LefMel/Documents/Xhelil Koleci Brucellosis/Data")
list.files()
library(openxlsx)
draft = read.xlsx("2 FEBRUARY ELISA SP AND FPA TITER FOR 655 SAMPLES.xlsx")
View(draft)
hist(draft$`ELISA.S/P`, breaks=20)
which.max(draft$`ELISA.S/P`)
min(draft$`ELISA.S/P`)
data = draft[-581,]
hist(data$`ELISA.S/P`, breaks=20)
hist(data$FPA.titer.DeltamP, breaks=20)
plot(density(data$`ELISA.S/P`))
plot(density(data$FPA.titer.DeltamP))
range(data$`ELISA.S/P`)
hist(draft$`ELISA.S/P`, breaks=20)
which.max(draft$`ELISA.S/P`)
min(draft$`ELISA.S/P`)
data = draft[-581,]
hist(data$`ELISA.S/P`, breaks=20)
getwd()
setwd("C:/Users/LefMel/Documents/Xhelil Koleci Brucellosis")
setwd("C:/Users/LefMel/Documents/Xhelil Koleci Brucellosis/Data")
setwd("C:/Users/LefMel/Documents/Xhelil Koleci Brucellosis")
