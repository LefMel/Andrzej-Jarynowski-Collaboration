model{

  data[1:4,1] ~ dmulti(prob1[1:4, 1], N_1)
  data[1:4,2] ~ dmulti(prob1[1:4, 2], N_2)

  
  prob[1,1] <- prev[1]*Se[1]*Se[2] + (1-prev[1])*(1-Sp[1])*(1-Sp[2])
  prob[2,1] <- prev[1]*Se[1]*(1-Se[2]) + (1-prev[1])*(1-Sp[1])*Sp[2]
  prob[3,1] <- prev[1]*(1-Se[1])*Se[2] + (1-prev[1])*Sp[1]*(1-Sp[2])
  prob[4,1] <- prev[1]*(1-Se[1])*(1-Se[2]) + (1-prev[1])*Sp[1]*Sp[2]

  
  prob[1,2] <- prev[2]*Se[1]*Se[2] + (1-prev[2])*(1-Sp[1])*(1-Sp[2])
  prob[2,2] <- prev[2]*Se[1]*(1-Se[2]) + (1-prev[2])*(1-Sp[1])*Sp[2]
  prob[3,2] <- prev[2]*(1-Se[1])*Se[2] + (1-prev[2])*Sp[1]*(1-Sp[2])
  prob[4,2] <- prev[2]*(1-Se[1])*(1-Se[2]) + (1-prev[2])*Sp[1]*Sp[2]

  prev[1] ~ dbeta(1,1)
  prev[2] ~ dbeta(1,1)
  Se[1] ~ dbeta(1, 1)T(1-Sp[1],)
  Sp[1] ~ dbeta(1, 1)
  Se[2] ~ dbeta(1, 1)T(1-Sp[2],)
  Sp[2] ~ dbeta(1, 1)

  #data# data_1, data_2, N_1, N_2
  #monitor# prev, Se, Sp
  #inits# prev, Se, Sp
  #module# lecuyer
  
}


model{
  for(p in 1:Populations){
    Tally[1:4, p] ~ dmulti(prob[1:4, p], TotalTests[p])
  
    # Test1- Test2-
	 	  prob[1,p] <- (prev[p] * ((1-se[1])*(1-se[2]))) + ((1-prev[p]) * ((sp[1])*(sp[2])))
    # Test1+ Test2-
  	prob[2,p] <- (prev[p] * ((se[1])*(1-se[2]))) + ((1-prev[p]) * ((1-sp[1])*(sp[2])))
    # Test1- Test2+
  	prob[3,p] <- (prev[p] * ((1-se[1])*(se[2]))) + ((1-prev[p]) * ((sp[1])*(1-sp[2])))
  	 # Test1+ Test2+
  	 prob[4,p] <- (prev[p] * ((se[1])*(se[2]))) + ((1-prev[p]) * ((1-sp[1])*(1-sp[2])))

    prev[p] ~ dbeta(1, 1)
  }
  se[1] ~ dbeta(se_prior[1,1], se_prior[1,2])T(1-sp[1], )
  sp[1] ~ dbeta(sp_prior[1,1], sp_prior[1,2])
  se[2] ~ dbeta(se_prior[2,1], se_prior[2,2])T(1-sp[2], )
  sp[2] ~ dbeta(sp_prior[2,1], sp_prior[2,2])

  #data# Tally, TotalTests, Populations, se_prior, sp_prior
  #monitor# prev, se, sp
  #inits# prev, se, sp
  #module# lecuyer
}